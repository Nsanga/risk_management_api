name: Déploiement de l'API Server Express

on:
  push:
    branches: [main]

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    environment: production
    env:
      CI: false
      DEFAULT_PASSWORD: ${{ secrets.DEFAULT_PASSWORD }}
      URL_DB_LIVE: ${{ secrets.URL_DB_LIVE }}
      URL_DB_LOCAL: ${{ secrets.URL_DB_LOCAL }}
      DB_NAME: ${{ secrets.DB_NAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}

    steps:
      - name: Récupérer le code du backend
        uses: actions/checkout@v3
        with:
          path: backend

      - name: Vérifier la structure du dépôt après checkout
        run: |
          echo "==== Structure complète après checkout ===="
          tree -L 3 backend || ls -R backend

      - name: Préparer la structure du dossier sur le serveur
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            echo "=== Préparation du dossier serveur ==="
            sudo mkdir -p /var/www/backend/risk_management_api
            sudo chown -R $USER:$USER /var/www/backend/risk_management_api
            echo "=== Structure initiale sur le serveur ==="
            ls -la /var/www/backend/risk_management_api

      - name: Vérification avant transfert SCP
        run: |
          echo "==== Vérification avant transfert SCP ===="
          echo "Contenu de backend à transférer :"
          ls -la backend

      - name: Transférer le code sur le serveur
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "backend/"   # Correction ici (transfert tout backend)
          target: "/var/www/backend/risk_management_api"
          strip_components: 1   # Retire le dossier racine "backend"

      - name: Vérification sur le serveur après transfert
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            echo "=== Structure après transfert ==="
            ls -la /var/www/backend/risk_management_api

      - name: Déployer l'API via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            echo "=== Démarrage du déploiement ==="
            cd /var/www/backend/risk_management_api

            echo "=== Installation des dépendances ==="
            npm ci --production

            echo "=== Redémarrage PM2 ==="
            pm2 reload risk_management_api --update-env || \
            pm2 start index.js --name risk_management_api --watch --update-env
            pm2 save

  notification:
    needs: deploy-api
    runs-on: ubuntu-latest
    environment: production
    if: always()
    steps:
      - name: Construire la liste des destinataires
        id: recipients
        run: |
          recipients="${{ vars.SMTP_TO }}"
          if [ -n "${{ vars.SMTP_TO_2 }}" ]; then
            recipients="$recipients, ${{ vars.SMTP_TO_2 }}"
          fi
          if [ -n "${{ vars.SMTP_TO_3 }}" ]; then
            recipients="$recipients, ${{ vars.SMTP_TO_3 }}"
          fi
          echo "allEmails=$recipients" >> $GITHUB_OUTPUT
          echo "Liste des destinataires : $recipients"

      - name: Envoyer email de succès
        if: ${{ needs.deploy-api.result == 'success' && steps.recipients.outputs.allEmails != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          subject: "🎉 Déploiement de l'API réussi !"
          body: "🚀 Le déploiement de l'API Server Express a été réalisé avec succès et PM2 a sauvegardé la configuration. 👍"
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.SMTP_FROM }}
          to: ${{ steps.recipients.outputs.allEmails }}

      - name: Envoyer email d'échec
        if: ${{ needs.deploy-api.result == 'failure' && steps.recipients.outputs.allEmails != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          subject: "❌ Déploiement de l'API échoué ❌"
          body: "⚠️ Le déploiement de l'API Server Express a échoué. Veuillez vérifier les logs pour plus de détails. 😞"
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.SMTP_FROM }}
          to: ${{ steps.recipients.outputs.allEmails }}

      - name: Aucune notification envoyée
        if: ${{ steps.recipients.outputs.allEmails == '' }}
        run: echo "Aucun destinataire défini, aucun email n'a été envoyé."
